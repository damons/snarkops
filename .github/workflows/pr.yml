name: PR
on:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # https://releases.rs/docs/1.83.0/ release date
  NIGHTLY_TOOLCHAIN: nightly-2025-02-20

# Cancel in progress workflows on pull_requests.
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  fmt:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚òÅÔ∏è Install Nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          components: rustfmt

      - name: üìã Format Check
        run: cargo +${{ env.NIGHTLY_TOOLCHAIN }} fmt -- --check

  filter:
    runs-on: ubuntu-latest
    outputs:
      top_toml: ${{ steps.filter.outputs.top_toml }}
      aot: ${{ steps.filter.outputs.aot }}
      checkpoint: ${{ steps.filter.outputs.checkpoint }}
      common: ${{ steps.filter.outputs.common }}
      control_plane: ${{ steps.filter.outputs.control_plane }}
      agent: ${{ steps.filter.outputs.agent }}
      scli: ${{ steps.filter.outputs.scli }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          base: ${{ github.ref_name }}
          filters: |
            top_toml:
              - 'Cargo.toml'
            aot:
              - 'crates/aot/**/*'
            checkpoint:
              - 'crates/checkpoint/**/*'
            control_plane:
              - 'crates/controlplane/**/*'
            agent:
              - 'crates/agent/**/*'
            scli:
              - 'crates/cli/**/*'
            common:
              - 'crates/common/**/*'

  crate-checks:
    runs-on: ubuntu-latest
    needs: [filter]
    env:
      TOP_TOML: ${{ needs.filter.outputs.top_toml }}
      AOT: ${{ needs.filter.outputs.aot }}
      CHECKPOINT: ${{ needs.filter.outputs.checkpoint }}
      COMMON: ${{ needs.filter.outputs.common }}
      CONTROL_PLANE: ${{ needs.filter.outputs.control_plane }}
      AGENT: ${{ needs.filter.outputs.agent }}
      SCLI: ${{ needs.filter.outputs.scli }}
    strategy:
      matrix:
        crate:
          - {
              name: "aot",
              package: "snarkos-aot",
              manifest: "crates/aot/Cargo.toml",
            }
          - {
              name: "checkpoint",
              package: "snops-checkpoint",
              manifest: "crates/checkpoint/Cargo.toml",
            }
          - {
              name: "common",
              package: "snops-common",
              manifest: "crates/common/Cargo.toml",
            }
          - {
              name: "control_plane",
              package: "snops",
              manifest: "crates/controlplane/Cargo.toml",
            }
          - {
              name: "agent",
              package: "snops-agent",
              manifest: "crates/agent/Cargo.toml",
            }
          - {
              name: "scli",
              package: "snops-cli",
              manifest: "crates/cli/Cargo.toml",
            }
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ü•¨ Use Mold Linker
        uses: rui314/setup-mold@v1

      - name: ‚òÅÔ∏è Install Nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          components: rustc-codegen-cranelift-preview clippy

      - name: ü´ô Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: cache-v1
          cache-on-failure: true

      - name: ‚òÅÔ∏è Install Nextest
        uses: taiki-e/install-action@nextest

      - name: ‚òÅÔ∏è Install cargo-machete
        uses: taiki-e/install-action@cargo-machete

      - name: ‚òÅÔ∏è Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall

      - name: ‚òÅÔ∏è Install cargo-msrv
        run: cargo binstall cargo-msrv -y

      - name: ‚òÅÔ∏è Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: ‚òÅÔ∏è Install cargo-minimal-versions
        uses: taiki-e/install-action@cargo-minimal-versions

      - name: üß™ Test ${{ matrix.crate.name }}
        if: always() && ${{ env.TOP_TOML == 'true' || (matrix.crate.name == 'aot' && env.AOT == 'true') || (matrix.crate.name == 'checkpoint' && env.CHECKPOINT == 'true') || (matrix.crate.name == 'common' && env.COMMON == 'true') || (matrix.crate.name == 'control_plane' && env.CONTROL_PLANE == 'true') || (matrix.crate.name == 'agent' && env.AGENT == 'true') || (matrix.crate.name == 'scli' && env.SCLI == 'true') }}
        env:
          RUSTFLAGS: ${{ (matrix.crate.name == 'aot' || matrix.crate.name == 'checkpoint' || matrix.crate.name == 'common' || matrix.crate.name == 'control_plane') && '-Zcodegen-backend=cranelift' || '' }}
        run: cargo +${{ env.NIGHTLY_TOOLCHAIN }} nextest run -p ${{ matrix.crate.package }} --verbose --fail-fast --all-features --no-tests=warn

      - name: üöØ Unused Deps ${{ matrix.crate.name }}
        if: always() && ${{ env.TOP_TOML == 'true' || (matrix.crate.name == 'aot' && env.AOT == 'true') || (matrix.crate.name == 'checkpoint' && env.CHECKPOINT == 'true') || (matrix.crate.name == 'common' && env.COMMON == 'true') || (matrix.crate.name == 'control_plane' && env.CONTROL_PLANE == 'true') || (matrix.crate.name == 'agent' && env.AGENT == 'true') || (matrix.crate.name == 'scli' && env.SCLI == 'true') }}
        run: cd crates/${{ matrix.crate.name }} && cargo +${{ env.NIGHTLY_TOOLCHAIN }} machete

      - name: ü¶Ä MSRV ${{ matrix.crate.name }}
        if: always() && ${{ env.TOP_TOML == 'true' || (matrix.crate.name == 'aot' && env.AOT == 'true') || (matrix.crate.name == 'checkpoint' && env.CHECKPOINT == 'true') || (matrix.crate.name == 'common' && env.COMMON == 'true') || (matrix.crate.name == 'control_plane' && env.CONTROL_PLANE == 'true') || (matrix.crate.name == 'agent' && env.AGENT == 'true') || (matrix.crate.name == 'scli' && env.SCLI == 'true') }}
        run: cargo +${{ env.NIGHTLY_TOOLCHAIN }} msrv --manifest-path ${{ matrix.crate.manifest }} verify

      - name: üïµÔ∏è Minimal Versions ${{ matrix.crate.name }}
        if: always() && ${{ env.TOP_TOML == 'true' || (matrix.crate.name == 'aot' && env.AOT == 'true') || (matrix.crate.name == 'checkpoint' && env.CHECKPOINT == 'true') || (matrix.crate.name == 'common' && env.COMMON == 'true') || (matrix.crate.name == 'control_plane' && env.CONTROL_PLANE == 'true') || (matrix.crate.name == 'agent' && env.AGENT == 'true') || (matrix.crate.name == 'scli' && env.SCLI == 'true') }}
        continue-on-error: true
        run: cargo +${{ env.NIGHTLY_TOOLCHAIN }} minimal-versions check -p ${{ matrix.crate.package }}

      - name: üìã Clippy ${{ matrix.crate.name }}
        if: always() && ${{ env.TOP_TOML == 'true' || (matrix.crate.name == 'aot' && env.AOT == 'true') || (matrix.crate.name == 'checkpoint' && env.CHECKPOINT == 'true') || (matrix.crate.name == 'common' && env.COMMON == 'true') || (matrix.crate.name == 'control_plane' && env.CONTROL_PLANE == 'true') || (matrix.crate.name == 'agent' && env.AGENT == 'true') || (matrix.crate.name == 'scli' && env.SCLI == 'true') }}
        env:
          RUSTFLAGS: ${{ (matrix.crate.name == 'aot' || matrix.crate.name == 'checkpoint' || matrix.crate.name == 'common' || matrix.crate.name == 'control_plane') && '-Zcodegen-backend=cranelift' || '' }}
        run: cargo +${{ env.NIGHTLY_TOOLCHAIN }} clippy -p ${{ matrix.crate.package }} --all-targets --locked -- -D warnings
